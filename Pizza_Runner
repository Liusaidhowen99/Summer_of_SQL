-- A. Pizza Metrics
-- 1. How many pizzas were ordered?
SELECT 
  COUNT(*) as pizzas_ordered 
FROM 
  customer_orders;
  
-- 2. How many unique customer orders were made?
SELECT 
  COUNT(DISTINCT order_id) as unique_orders 
FROM 
  customer_orders;
  
-- 3. How many successful orders were delivered by each runner?
SELECT 
  runner_id, 
  COUNT(DISTINCT order_id) as delivered_orders 
FROM 
  runner_orders 
WHERE 
  pickup_time<>'null' 
GROUP BY 
  runner_id;
  
-- 4. How many of each type of pizza was delivered?
SELECT 
  pizza_name, 
  COUNT(co.order_id) as delivered_pizzas 
FROM 
  customer_orders as co 
  INNER JOIN pizza_names as pn on co.pizza_id = pn.pizza_id 
  INNER JOIN runner_orders as ro on ro.order_id = co.order_id 
WHERE 
  pickup_time<>'null'
GROUP BY 
  pizza_name;
  
-- 5. How many Vegetarian and Meatlovers were ordered by each customer?
SELECT 
  customer_id, 
  pizza_name, 
  COUNT(co.order_id) as ordered_pizzas 
FROM 
  customer_orders as co 
  INNER JOIN pizza_names as pn on co.pizza_id = pn.pizza_id 
GROUP BY 
  pizza_name, 
  customer_id;
  
-- 6. What was the maximum number of pizzas delivered in a single order?
SELECT 
  ro.order_id, 
  COUNT(co.order_id) as delivered_pizzas 
FROM 
  customer_orders as co 
  INNER JOIN pizza_names as pn on co.pizza_id = pn.pizza_id 
  INNER JOIN runner_orders as ro on ro.order_id = co.order_id 
WHERE 
  pickup_time<>'null'
GROUP BY 
  ro.order_id 
ORDER BY 
  COUNT(co.order_id) DESC 
LIMIT 1;
  
-- 7. For each customer, how many delivered pizzas had at least 1 change and how many had no changes?
SELECT 
  customer_id, 
  SUM(CASE 
    WHEN 
        (
          (exclusions IS NOT NULL AND exclusions<>'null' AND LENGTH(exclusions)>0) 
        AND (extras IS NOT NULL AND extras<>'null' AND LENGTH(extras)>0)
        )=TRUE
    THEN 1 
    ELSE 0
  END) as changes, 
  SUM(CASE 
    WHEN 
        (
          (exclusions IS NOT NULL AND exclusions<>'null' AND LENGTH(exclusions)>0) 
        AND (extras IS NOT NULL AND extras<>'null' AND LENGTH(extras)>0)
        )=TRUE
    THEN 0 
    ELSE 1
  END) as no_changes 
FROM 
  customer_orders as co 
  INNER JOIN runner_orders as ro on ro.order_id = co.order_id 
WHERE 
  pickup_time<>'null'
GROUP BY 
  customer_id;
  
-- 8. How many pizzas were delivered that had both exclusions and extras?
SELECT 
  COUNT(pizza_id) as pizzas_delivered_with_exclusions_and_extras 
FROM 
  customer_orders as co 
  INNER JOIN runner_orders as ro on ro.order_id = co.order_id 
WHERE 
  pickup_time<>'null'
  AND (exclusions IS NOT NULL AND exclusions<>'null' AND LENGTH(exclusions)>0) 
  AND (extras IS NOT NULL AND extras<>'null' AND LENGTH(extras)>0); 
  
-- 9. What was the total volume of pizzas ordered for each hour of the day?
SELECT 
  DATE_PART('hour', order_time) as hour, 
  COUNT(*) as ordered_pizzas 
FROM 
  customer_orders 
GROUP BY 
  DATE_PART('hour', order_time); 
  
-- 10. What was the volume of orders for each day of the week?
SELECT 
  DAYNAME(order_time) as day, 
  COUNT(*) as ordered_pizzas 
FROM 
  customer_orders 
GROUP BY 
  DAYNAME(order_time);


-- B. Runner and Customer Experience
-- 1. How many runners signed up for each 1 week period? (i.e. week starts 2021-01-01)
WITH runner_signups AS (
  SELECT 
    runner_id, 
    registration_date, 
    DATE_TRUNC('week', registration_date) + 4 AS start_of_week 
  FROM 
    runners
) 
SELECT 
  start_of_week, 
  COUNT(runner_id) AS signups 
FROM 
  runner_signups 
GROUP BY 
  start_of_week 
ORDER BY 
  start_of_week;
  
-- 2. What was the average time in minutes it took for each runner to arrive at the Pizza Runner HQ to pickup the order?
SELECT 
  runner_id, 
  AVG(TIMEDIFF(minute, order_time::timestamp_ntz, pickup_time::timestamp_ntz)) as avg_minutes_to_pickup 
FROM 
  runner_orders as ro 
  INNER JOIN customer_orders as co on ro.order_id = co.order_id 
WHERE 
  pickup_time <> 'null' 
GROUP BY 
  runner_id;
  
-- 3. Is there any relationship between the number of pizzas and how long the order takes to prepare?
WITH CTE AS (
  SELECT 
    ro.order_id, 
    COUNT(pizza_id) as number_of_pizzas, 
    MAX(TIMEDIFF(minute, order_time::timestamp_ntz, pickup_time::timestamp_ntz)) as order_prep_time 
  FROM 
    runner_orders as ro 
    INNER JOIN customer_orders as co on ro.order_id = co.order_id 
  WHERE 
    pickup_time <> 'null' 
  GROUP BY 
    ro.order_id
) 
SELECT 
  number_of_pizzas, 
  AVG(order_prep_time) as avg_order_prep_time 
FROM 
  CTE 
GROUP BY 
  number_of_pizzas;
  
-- 4. What was the average distance travelled for each customer?
SELECT 
  customer_id, 
  AVG(REPLACE(distance, 'km', ''):: numeric(3, 1)) as avg_distance_travelled 
FROM 
  runner_orders as ro 
  INNER JOIN customer_orders as co on ro.order_id = co.order_id 
WHERE 
  distance <> 'null' 
GROUP BY 
  customer_id;
  
-- 5. What was the difference between the longest and shortest delivery times for all orders?
SELECT 
  MAX(REGEXP_REPLACE(duration, '[^0-9]', '')::int) - MIN(REGEXP_REPLACE(duration, '[^0-9]', '')::int) as delivery_time_difference 
FROM 
  runner_orders 
WHERE 
  duration <> 'null' 

-- 6. What was the average speed for each runner for each delivery and do you notice any trend for these values?
SELECT 
  runner_id, 
  order_id, 
  REPLACE(distance, 'km', '')::numeric(3, 1) / REGEXP_REPLACE(duration, '[^0-9]', '')::numeric(3, 1) as speed_km_per_minute 
FROM 
  runner_orders 
WHERE 
  duration <> 'null' 
ORDER BY 
  runner_id, 
  order_id 

-- 7. What is the successful delivery percentage for each runner?
SELECT 
  runner_id, 
  COUNT(order_id) as orders, 
  SUM(
    CASE 
        WHEN pickup_time = 'null' 
        THEN 0
        ELSE 1 
    END
  ) / COUNT(order_id) as delivery_percentage 
FROM 
  runner_orders 
GROUP BY 
  runner_id;


-- C. Ingredient Optimisation
-- 1. What are the standard ingredients for each pizza?
SELECT 
T.TOPPING_NAME,
COUNT(DISTINCT pizza_id) as appears_on_x_many_pizzas
FROM pizza_recipes as R
LEFT JOIN LATERAL SPLIT_TO_TABLE(toppings,', ') as S
INNER JOIN pizza_toppings as T ON T.topping_id=S.value
GROUP BY T.TOPPING_NAME
HAVING COUNT(DISTINCT pizza_id)=2;

-- 2. What was the most commonly added extra?
SELECT 
T.TOPPING_NAME,
COUNT(order_id) as extras
FROM customer_orders as co
LEFT JOIN LATERAL SPLIT_TO_TABLE(extras,', ') as S
INNER JOIN pizza_toppings as T ON T.topping_id=S.value
WHERE LENGTH(value)>0 AND value<>'null'
GROUP BY T.TOPPING_NAME
ORDER BY COUNT(order_id) DESC
LIMIT 1;

-- 3. What was the most common exclusion?
SELECT 
T.TOPPING_NAME,
COUNT(order_id) as exclusions
FROM customer_orders as co
LEFT JOIN LATERAL SPLIT_TO_TABLE(exclusions,', ') as S
INNER JOIN pizza_toppings as T ON T.topping_id=S.value
WHERE LENGTH(value)>0 AND value<>'null'
GROUP BY T.TOPPING_NAME
ORDER BY COUNT(order_id) DESC
LIMIT 1;

-- 4. Generate an order item for each record in the customers_orders table in the format of one of the following:
    -- Meat Lovers
    -- Meat Lovers - Exclude Beef
    -- Meat Lovers - Extra Bacon
    -- Meat Lovers - Exclude Cheese, Bacon - Extra Mushroom, Peppers

WITH EXCLUSIONS AS (
    SELECT 
    order_id,
    pizza_id,
    S.value as topping_id,
    T.topping_name
    FROM customer_orders as co
    LEFT JOIN LATERAL SPLIT_TO_TABLE(exclusions,', ') as S
    INNER JOIN pizza_toppings as T on t.topping_id = S.value
    WHERE LENGTH(value)>0 AND value<>'null'
)
,EXTRAS AS (
    SELECT 
    order_id,
    pizza_id,
    S.value as topping_id,
    T.topping_name
    FROM customer_orders as co
    LEFT JOIN LATERAL SPLIT_TO_TABLE(extras,', ') as S
    INNER JOIN pizza_toppings as T on t.topping_id = S.value
    WHERE LENGTH(value)>0 AND value<>'null'
)
,ORDERS AS (
    SELECT DISTINCT
    CO.order_id,
    CO.pizza_id,
    S.value as topping_id
    FROM customer_orders as CO
    INNER JOIN pizza_recipes as PR on CO.pizza_id = PR.pizza_id
    LEFT JOIN LATERAL SPLIT_TO_TABLE(toppings,', ') as S
)
,ORDERS_WITH_EXTRAS_AND_EXCLUSIONS AS (
    SELECT
    O.order_id,
    O.pizza_id,
    CASE 
    WHEN O.pizza_id = 1 THEN 'Meat Lovers'
    WHEN O.pizza_id = 2 THEN pizza_name
    END as pizza, 
    LISTAGG(DISTINCT EXT.topping_name, ', ') as extras,
    LISTAGG(DISTINCT EXC.topping_name, ', ') as exclusions
    FROM ORDERS AS O
    LEFT JOIN EXTRAS AS EXT ON EXT.order_id=O.order_id AND EXT.pizza_id=O.pizza_id
    LEFT JOIN EXCLUSIONS AS EXC ON EXC.order_id=O.order_id AND EXC.pizza_id=O.pizza_id AND EXC.topping_id=O.topping_id 
    INNER JOIN pizza_names as PN on O.pizza_id = PN.pizza_id
    GROUP BY O.order_id,
    O.pizza_id,
    CASE 
    WHEN O.pizza_id = 1 THEN 'Meat Lovers'
    WHEN O.pizza_id = 2 THEN pizza_name
    END
)

SELECT 
order_id,
pizza_id,
CONCAT(pizza, 
CASE WHEN exclusions = '' THEN '' ELSE ' - Exclude ' || exclusions END,
CASE WHEN extras = '' THEN '' ELSE ' - Extra ' || extras END) as order_item
FROM ORDERS_WITH_EXTRAS_AND_EXCLUSIONS
ORDER BY order_id; 

-- 5. Generate an alphabetically ordered comma separated ingredient list for each pizza order from the customer_orders table and add a 2x in front of any relevant ingredients
-- For example: "Meat Lovers: 2xBacon, Beef, ... , Salami"
WITH EXCLUSIONS AS (
    SELECT 
    order_id,
    pizza_id,
    S.value as topping_id
    FROM customer_orders as co
    LEFT JOIN LATERAL SPLIT_TO_TABLE(exclusions,', ') as S
    WHERE LENGTH(value)>0 AND value<>'null'
)
,EXTRAS AS (
    SELECT 
    order_id,
    pizza_id,
    S.value as topping_id,
    topping_name
    FROM customer_orders as co
    LEFT JOIN LATERAL SPLIT_TO_TABLE(extras,', ') as S
    INNER JOIN pizza_toppings as T on t.topping_id = S.value
    WHERE LENGTH(value)>0 AND value<>'null'
)
,ORDERS AS (
    SELECT DISTINCT
    CO.order_id,
    CO.pizza_id,
    S.value as topping_id,
    topping_name
    FROM customer_orders as CO
    INNER JOIN pizza_recipes as PR on CO.pizza_id = PR.pizza_id
    LEFT JOIN LATERAL SPLIT_TO_TABLE(toppings,', ') as S
    INNER JOIN pizza_toppings as T on t.topping_id = S.value
)
,ORDERS_WITH_EXTRAS_AND_EXCLUSIONS AS (
    SELECT 
    O.order_id,
    O.pizza_id,
    O.topping_id::int as topping_id,
    topping_name
    FROM ORDERS AS O
    LEFT JOIN EXCLUSIONS AS EXC ON EXC.order_id=O.order_id AND EXC.pizza_id=O.pizza_id AND EXC.topping_id=O.topping_id 
    WHERE EXC.topping_id IS NULL

    UNION ALL 

    SELECT 
    order_id,
    pizza_id,
    topping_id::int as topping_id,
    topping_name
    FROM EXTRAS
    WHERE topping_id<>''
)
,TOPPING_COUNT AS (
    SELECT 
    O.order_id,
    O.pizza_id,
    O.topping_name,
    COUNT(*) as n
    FROM ORDERS_WITH_EXTRAS_AND_EXCLUSIONS as O
    GROUP BY 
    O.order_id,
    O.pizza_id,
    O.topping_name
)
SELECT 
order_id,
pizza_id,
LISTAGG(
CASE
    WHEN n>1 THEN n || 'x' || topping_name
    ELSE topping_name
END,', ') as ingredient
FROM TOPPING_COUNT
GROUP BY order_id,
pizza_id;

-- 6. What is the total quantity of each ingredient used in all delivered pizzas sorted by most frequent first?
WITH EXCLUSIONS AS (
    SELECT 
    order_id,
    pizza_id,
    S.value as topping_id
    FROM customer_orders as co
    LEFT JOIN LATERAL SPLIT_TO_TABLE(exclusions,', ') as S
    WHERE LENGTH(value)>0 AND value<>'null'
)
,EXTRAS AS (
    SELECT 
    order_id,
    pizza_id,
    S.value as topping_id,
    topping_name
    FROM customer_orders as co
    LEFT JOIN LATERAL SPLIT_TO_TABLE(extras,', ') as S
    INNER JOIN pizza_toppings as T on t.topping_id = S.value
    WHERE LENGTH(value)>0 AND value<>'null'
)
,ORDERS AS (
    SELECT DISTINCT
    CO.order_id,
    CO.pizza_id,
    S.value as topping_id,
    topping_name
    FROM customer_orders as CO
    INNER JOIN pizza_recipes as PR on CO.pizza_id = PR.pizza_id
    LEFT JOIN LATERAL SPLIT_TO_TABLE(toppings,', ') as S
    INNER JOIN pizza_toppings as T on t.topping_id = S.value
)
,ORDERS_WITH_EXTRAS_AND_EXCLUSIONS AS (
    SELECT 
    O.order_id,
    O.pizza_id,
    O.topping_id::int as topping_id,
    topping_name
    FROM ORDERS AS O
    LEFT JOIN EXCLUSIONS AS EXC ON EXC.order_id=O.order_id AND EXC.pizza_id=O.pizza_id AND EXC.topping_id=O.topping_id 
    WHERE EXC.topping_id IS NULL

    UNION ALL 

    SELECT 
    order_id,
    pizza_id,
    topping_id::int as topping_id,
    topping_name
    FROM EXTRAS
    WHERE topping_id<>''
)

SELECT 
O.topping_name,
COUNT(O.pizza_id) as ingredient_count
FROM ORDERS_WITH_EXTRAS_AND_EXCLUSIONS as O
INNER JOIN runner_orders as ro on O.order_id = ro.order_id
WHERE pickup_time<>'null'
GROUP BY 
O.topping_name
ORDER BY COUNT(O.pizza_id) DESC;
